package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"business_deal_api/graph/model"
	"business_deal_api/models"
	"context"

	"github.com/gofrs/uuid"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {

	id, err := uuid.NewV4()
	if err != nil {
		return nil, err
	}

	err = r.db.Create(&models.Todo{
		ID:  id,
		Text: input.Text,
		Done: false,
		UserID: uuid.FromStringOrNil(input.UserID),
	})

	if err != nil {
		return nil, err
	}


	return &model.Todo{
		ID:   id.String(),
		Text: input.Text,
		Done: false,
	}, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {

	todos := &models.Todos{}
	err := r.db.All(todos)
	if err != nil {
		return nil, err
	}

	var gqlTodo []*model.Todo
	for _, todo := range *todos {
		gqlTodo = append(gqlTodo, todo.Graphql())
	}

	return gqlTodo, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { 
	r.db = models.DB
	return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { 
	
	r.db = models.DB
	return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
